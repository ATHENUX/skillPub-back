{
  "version": 3,
  "sources": [
    "Redux/Reducers/User.ts",
    "Redux/Store.ts",
    "Theme/MaterialUi.ts",
    "Hooks/useSEO.ts",
    "Assets/Styles/CustomStyles.ts",
    "Pages/Home.tsx",
    "Components/Navbar.tsx",
    "Router/App.tsx",
    "serviceWorker.ts",
    "I18next.ts",
    "index.tsx"
  ],
  "names": [
    "initialState",
    "name",
    "lastName",
    "firstName",
    "reducer",
    "state",
    "type",
    "payload",
    "combineReducers",
    "User",
    "composeEnhancers",
    "window",
    "__REDUX_DEVTOOLS_EXTENSION__",
    "store",
    "createStore",
    "theme",
    "createMuiTheme",
    "palette",
    "primary",
    "light",
    "main",
    "dark",
    "contrastText",
    "useSEO",
    "title",
    "description",
    "useEffect",
    "document",
    "metaDescription",
    "querySelector",
    "setAttribute",
    "useButtonStyles",
    "makeStyles",
    "btn",
    "background",
    "border",
    "borderRadius",
    "boxShadow",
    "color",
    "height",
    "padding",
    "margin",
    "props",
    "hide",
    "useNavbarStyles",
    "createStyles",
    "root",
    "flexGrow",
    "menuButton",
    "marginRight",
    "spacing",
    "offset",
    "mixins",
    "toolbar",
    "mapDispatchToProps",
    "getUserData",
    "response",
    "connect",
    "user",
    "withWidth",
    "width",
    "useTranslation",
    "t",
    "i18n",
    "useState",
    "marginChange",
    "setmarginChange",
    "classes",
    "getUsers",
    "a",
    "Container",
    "maxWidth",
    "Typography",
    "variant",
    "Button",
    "size",
    "onClick",
    "startIcon",
    "className",
    "changeLanguage",
    "Navbar",
    "React",
    "anchorEl",
    "setAnchorEl",
    "open",
    "Boolean",
    "handleClose",
    "AppBar",
    "position",
    "Toolbar",
    "IconButton",
    "edge",
    "aria-label",
    "aria-controls",
    "aria-haspopup",
    "event",
    "currentTarget",
    "Menu",
    "id",
    "anchorOrigin",
    "vertical",
    "horizontal",
    "keepMounted",
    "transformOrigin",
    "onClose",
    "MenuItem",
    "App",
    "ThemeProvider",
    "path",
    "component",
    "Home",
    "location",
    "hostname",
    "match",
    "resources",
    "en",
    "translation",
    "es",
    "use",
    "detector",
    "backend",
    "initReactI18next",
    "init",
    "lng",
    "keySeparator",
    "interpolation",
    "escapeValue",
    "ReactDOM",
    "render",
    "StrictMode",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister",
    "catch",
    "error",
    "console",
    "message"
  ],
  "mappings": "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",
  "file": "static/js/main.07ac485a.chunk.js",
  "sourcesContent": [
    "import { AxiosResponse } from \"axios\";\r\n\r\n//types\r\nimport {userData,actionUser} from \"../../types\"\r\n\r\n//initial state\r\nconst initialState: userData = {\r\n  name: \"\",\r\n  lastName: \"\",\r\n  firstName: \"\",\r\n};\r\n\r\n//management of the type of actions\r\nconst GET_USER_DATA: string = \"getUserData\";\r\n\r\n//reducer\r\nconst reducer = (state: userData = initialState, { type, payload }: actionUser) => {\r\n  switch (type) {\r\n    case GET_USER_DATA:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//acciones\r\nexport const getUserData = (response: AxiosResponse) => {\r\n  return {\r\n    type: GET_USER_DATA,\r\n    payload: response,\r\n  };\r\n};\r\n\r\nexport default reducer;\r\n",
    "import { createStore, combineReducers } from \"redux\";\r\n\r\n//reducers\r\nimport User from \"./Reducers/User\";\r\n\r\nconst reducer = combineReducers({\r\n  User,\r\n});\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nconst store = createStore(reducer, composeEnhancers);\r\n\r\nexport default store;\r\n",
    "import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: \"#bbdefb\",\r\n      main: \"#90caf9\",\r\n      dark: \"#1976d2\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n",
    "import { useEffect } from \"react\";\r\n\r\n//types\r\nimport {SEO} from \"../types\"\r\n\r\nconst useSEO = ({ title, description }: SEO) => {\r\n  useEffect(() => {\r\n    document.title = `Social network | ${title}`;\r\n  }, [title]);\r\n\r\n  useEffect(() => {\r\n    const metaDescription = document.querySelector('meta[name=\"description\"]');\r\n    metaDescription?.setAttribute(\"content\", description);\r\n  }, [description]);\r\n};\r\n\r\nexport default useSEO;\r\n",
    "import { createStyles, makeStyles, Theme } from \"@material-ui/core\";\r\n\r\n//types\r\ntype StyleProps = { hide: boolean };\r\n\r\nexport const useButtonStyles = makeStyles<unknown, StyleProps>({\r\n  btn: {\r\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\r\n    border: 0,\r\n    borderRadius: 3,\r\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\r\n    color: \"white\",\r\n    height: 48,\r\n    padding: \"0 30px\",\r\n    margin: (props) => (props.hide ? \"2em\" : 0),\r\n  },\r\n});\r\n\r\nexport const useNavbarStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    offset: theme.mixins.toolbar,\r\n  })\r\n);",
    "import React, { FC, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserData } from \"../Redux/Reducers/User\";\r\nimport useSEO from \"../Hooks/useSEO\";\r\n\r\n//Material ui\r\nimport { Button, Typography, withWidth, Container } from \"@material-ui/core\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\n//styles\r\nimport { useButtonStyles } from \"../Assets/Styles/CustomStyles\";\r\n\r\n//i18n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n//types\r\nimport {homeProps,userData} from \"../types\"\r\n\r\n// const local = navigator.language\r\n//Function component\r\nconst Home: FC<homeProps> = ({ getUserData, user, width }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const [marginChange, setmarginChange] = useState<boolean>(true);\r\n  const classes = useButtonStyles({ hide: marginChange });\r\n\r\n  useSEO({\r\n    title: `Home`,\r\n    description: \"home information\",\r\n  });\r\n\r\n  const getUsers = async () => {\r\n    const response: userData = {\r\n      name: t(\"A-test-username\"),\r\n      lastName: \"A test last name\",\r\n      firstName: \"A test first name\",\r\n    };\r\n    getUserData(response);\r\n  };\r\n\r\n  const onChangeLanguaje = () => {\r\n    i18n.changeLanguage(\"es\");\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth={width}>\r\n      <h1>\r\n        {t(\"home\")} <HomeIcon/>\r\n      </h1>\r\n      <p>\r\n        Screen size <strong>{width}</strong>{\" \"}\r\n      </p>\r\n      <Typography variant=\"h1\"> hello world</Typography>\r\n      <Button size=\"small\" onClick={getUsers} startIcon={<AccountBoxIcon />} className={classes.btn}>\r\n        get user\r\n      </Button>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={() => setmarginChange(!marginChange)}>\r\n        margin change\r\n      </Button>\r\n\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={onChangeLanguaje}>\r\n        on change languaje\r\n      </Button>\r\n\r\n      {user.name && (\r\n        <ul>\r\n          <li>{user.name}</li>\r\n          <li>{user.lastName}</li>\r\n          <li>{user.firstName}</li>\r\n        </ul>\r\n      )}\r\n\r\n      <Typography variant=\"h1\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Dolorem mollitia saepe vitae consequuntur cupiditate totam, officiis minima odit fugit expedita reiciendis, temporibus ex aperiam assumenda quam suscipit molestias? Sint, earum. --------------------------------------------------------------------------------------------------------</Typography>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  user: state.User,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getUserData,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withWidth()(Home));\r\n",
    "import React from \"react\";\r\n\r\n//material ui\r\nimport { AppBar, Toolbar, Typography, IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\n\r\n//styles\r\nimport { useNavbarStyles } from \"../Assets/Styles/CustomStyles\";\r\n\r\nexport default function Navbar() {\r\n  const classes = useNavbarStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Front app\r\n          </Typography>\r\n\r\n          <div>\r\n            <IconButton aria-label=\"account of current user\" aria-controls=\"menu-appbar\" aria-haspopup=\"true\" onClick={handleMenu} color=\"inherit\">\r\n              <AccountCircle />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorEl}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n              }}\r\n              open={open}\r\n              onClose={handleClose}\r\n            >\r\n              <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n              <MenuItem onClick={handleClose}>My account</MenuItem>\r\n            </Menu>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.offset}></div>\r\n    </div>\r\n  );\r\n}\r\n",
    "import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../Redux/Store\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  //Redirect,\r\n} from \"react-router-dom\";\r\n\r\n//material ui\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport theme from \"../Theme/MaterialUi\";\r\n\r\n//pages\r\nimport Home from \"../Pages/Home\";\r\n\r\n//navbar\r\nimport Navbar from \"../Components/Navbar\";\r\n\r\nexport default function App(): JSX.Element {\r\n  return (\r\n    <Router>\r\n      <ThemeProvider theme={theme}>\r\n        <Provider store={store}>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route path=\"/\" component={Home} />\r\n          </Switch>\r\n        </Provider>\r\n      </ThemeProvider>\r\n    </Router>\r\n  );\r\n}\r\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport detector from \"i18next-browser-languagedetector\";\r\nimport backend from \"i18next-xhr-backend\";\r\n\r\nimport translationEN from \"./Locales/en/translation.json\";\r\nimport translationES from \"./Locales/es/translation.json\";\r\n\r\nconst resources = {\r\n  en: {\r\n    translation: translationEN,\r\n  },\r\n  es: {\r\n    translation: translationES,\r\n  },\r\n};\r\n\r\ni18n\r\n  .use(detector)\r\n  .use(backend)\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n",
    "import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./Assets/Styles/index.css\";\r\nimport App from \"./Router/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./I18next\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"
  ],
  "sourceRoot": ""
}
